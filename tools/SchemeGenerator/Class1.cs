// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MissBot;
//
//    var apiResponse = ApiResponse.FromJson(jsonString);

namespace MissBot
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ApiResponse : DataUnit
    {
        [JsonProperty("okr")]
        public virtual bool Okr { get; set; }

        [JsonProperty("result")]
        public virtual System.Collections.Generic.List<Result> Result { get; set; }
    }

    public class DataUnit
    {
    }

    public partial class Result : DataUnit
    {
        [JsonProperty("update_id")]
        public virtual long UpdateId { get; set; }

        [JsonProperty("message")]
        public virtual Message Message { get; set; }
    }

    public partial class Message : DataUnit
    {
        [JsonProperty("message_id")]
        public virtual long MessageId { get; set; }

        [JsonProperty("from")]
        public virtual From From { get; set; }

        [JsonProperty("chat")]
        public virtual Chat Chat { get; set; }

        [JsonProperty("date")]
        public virtual long Date { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Text { get; set; }

        [JsonProperty("entities", NullValueHandling = NullValueHandling.Ignore)]
        public virtual EntityData Entities { get; set; }

        [JsonProperty("sticker", NullValueHandling = NullValueHandling.Ignore)]
        public virtual Sticker Sticker { get; set; }

        [JsonProperty("document", NullValueHandling = NullValueHandling.Ignore)]
        public virtual Document Document { get; set; }

        [JsonProperty("caption", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Caption { get; set; }

        [JsonProperty("media_group_id", NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MediaGroupId { get; set; }
    }

    public partial class Chat : DataUnit
    {
        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("first_name")]
        public virtual FirstName FirstName { get; set; }

        [JsonProperty("username")]
        public virtual Username Username { get; set; }

        [JsonProperty("type")]
        public virtual TypeEnum Type { get; set; }
    }

    public partial class Document : DataUnit
    {
        [JsonProperty("file_name")]
        public virtual string FileName { get; set; }

        [JsonProperty("mime_type")]
        public virtual MimeType MimeType { get; set; }

        [JsonProperty("thumb", NullValueHandling = NullValueHandling.Ignore)]
        public virtual Thumb Thumb { get; set; }

        [JsonProperty("file_id")]
        public virtual string FileId { get; set; }

        [JsonProperty("file_unique_id")]
        public virtual string FileUniqueId { get; set; }

        [JsonProperty("file_size")]
        public virtual long FileSize { get; set; }
    }

    public partial class Thumb : DataUnit
    {
        [JsonProperty("file_id")]
        public virtual string FileId { get; set; }

        [JsonProperty("file_unique_id")]
        public virtual string FileUniqueId { get; set; }

        [JsonProperty("file_size")]
        public virtual long FileSize { get; set; }

        [JsonProperty("width")]
        public virtual long Width { get; set; }

        [JsonProperty("height")]
        public virtual long Height { get; set; }
    }

    public partial class EntityData : DataUnit
    {
        [JsonProperty("offset")]
        public virtual long Offset { get; set; }

        [JsonProperty("length")]
        public virtual long Length { get; set; }

        [JsonProperty("type")]
        public virtual string Type { get; set; }
    }

    public partial class From : DataUnit
    {
        [JsonProperty("id")]
        public virtual long Id { get; set; }

        [JsonProperty("is_bot")]
        public virtual bool IsBot { get; set; }

        [JsonProperty("first_name")]
        public virtual FirstName FirstName { get; set; }

        [JsonProperty("username")]
        public virtual Username Username { get; set; }

        [JsonProperty("language_code")]
        public virtual LanguageCode LanguageCode { get; set; }
    }

    public partial class Sticker : DataUnit
    {
        [JsonProperty("width")]
        public virtual long Width { get; set; }

        [JsonProperty("height")]
        public virtual long Height { get; set; }

        [JsonProperty("emoji")]
        public virtual string Emoji { get; set; }

        [JsonProperty("set_name")]
        public virtual string SetName { get; set; }

        [JsonProperty("is_animated")]
        public virtual bool IsAnimated { get; set; }

        [JsonProperty("is_video")]
        public virtual bool IsVideo { get; set; }

        [JsonProperty("type")]
        public virtual string Type { get; set; }

        [JsonProperty("thumb")]
        public virtual Thumb Thumb { get; set; }

        [JsonProperty("file_id")]
        public virtual string FileId { get; set; }

        [JsonProperty("file_unique_id")]
        public virtual string FileUniqueId { get; set; }

        [JsonProperty("file_size")]
        public virtual long FileSize { get; set; }
    }

    public enum FirstName { Maseva };

    public enum TypeEnum { Private };

    public enum Username { MasevaMaster };

    public enum MimeType { ApplicationPdf, ApplicationXMsDosExecutable, TextXCsharp, TextXLog };

    public enum LanguageCode { En };

    public partial class ApiResponse : DataUnit
    {
        public static ApiResponse FromJson(string json) => JsonConvert.DeserializeObject<ApiResponse>(json, MissBot.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ApiResponse self) => JsonConvert.SerializeObject(self, MissBot.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                FirstNameConverter.Singleton,
                TypeEnumConverter.Singleton,
                UsernameConverter.Singleton,
                MimeTypeConverter.Singleton,
                LanguageCodeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class FirstNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FirstName) || t == typeof(FirstName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Maseva")
            {
                return FirstName.Maseva;
            }
            throw new Exception("Cannot unmarshal type FirstName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FirstName)untypedValue;
            if (value == FirstName.Maseva)
            {
                serializer.Serialize(writer, "Maseva");
                return;
            }
            throw new Exception("Cannot marshal type FirstName");
        }

        public static readonly FirstNameConverter Singleton = new FirstNameConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "private")
            {
                return TypeEnum.Private;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Private)
            {
                serializer.Serialize(writer, "private");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class UsernameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Username) || t == typeof(Username?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "MasevaMaster")
            {
                return Username.MasevaMaster;
            }
            throw new Exception("Cannot unmarshal type Username");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Username)untypedValue;
            if (value == Username.MasevaMaster)
            {
                serializer.Serialize(writer, "MasevaMaster");
                return;
            }
            throw new Exception("Cannot marshal type Username");
        }

        public static readonly UsernameConverter Singleton = new UsernameConverter();
    }

    internal class MimeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MimeType) || t == typeof(MimeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "application/pdf":
                    return MimeType.ApplicationPdf;
                case "application/x-ms-dos-executable":
                    return MimeType.ApplicationXMsDosExecutable;
                case "text/x-csharp":
                    return MimeType.TextXCsharp;
                case "text/x-log":
                    return MimeType.TextXLog;
            }
            throw new Exception("Cannot unmarshal type MimeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MimeType)untypedValue;
            switch (value)
            {
                case MimeType.ApplicationPdf:
                    serializer.Serialize(writer, "application/pdf");
                    return;
                case MimeType.ApplicationXMsDosExecutable:
                    serializer.Serialize(writer, "application/x-ms-dos-executable");
                    return;
                case MimeType.TextXCsharp:
                    serializer.Serialize(writer, "text/x-csharp");
                    return;
                case MimeType.TextXLog:
                    serializer.Serialize(writer, "text/x-log");
                    return;
            }
            throw new Exception("Cannot marshal type MimeType");
        }

        public static readonly MimeTypeConverter Singleton = new MimeTypeConverter();
    }

    internal class LanguageCodeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(LanguageCode) || t == typeof(LanguageCode?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "en")
            {
                return LanguageCode.En;
            }
            throw new Exception("Cannot unmarshal type LanguageCode");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (LanguageCode)untypedValue;
            if (value == LanguageCode.En)
            {
                serializer.Serialize(writer, "en");
                return;
            }
            throw new Exception("Cannot marshal type LanguageCode");
        }

        public static readonly LanguageCodeConverter Singleton = new LanguageCodeConverter();
    }
}
